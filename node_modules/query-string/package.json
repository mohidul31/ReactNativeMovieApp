{
  "_args": [
    [
      {
        "raw": "query-string@^6.4.2",
        "scope": null,
        "escapedName": "query-string",
        "name": "query-string",
        "rawSpec": "^6.4.2",
        "spec": ">=6.4.2 <7.0.0",
        "type": "range"
      },
      "J:\\ReactNativeMovieApp\\node_modules\\@react-navigation\\core"
    ]
  ],
  "_from": "query-string@^6.4.2",
  "_hasShrinkwrap": false,
  "_id": "query-string@6.9.0",
  "_location": "/query-string",
  "_nodeVersion": "12.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/query-string_6.9.0_1573620374959_0.1914658487774883"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "query-string@^6.4.2",
    "scope": null,
    "escapedName": "query-string",
    "name": "query-string",
    "rawSpec": "^6.4.2",
    "spec": ">=6.4.2 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@react-navigation/core"
  ],
  "_resolved": "https://registry.npmjs.org/query-string/-/query-string-6.9.0.tgz",
  "_shasum": "1c3b727c370cf00f177c99f328fda2108f8fa3dd",
  "_shrinkwrap": null,
  "_spec": "query-string@^6.4.2",
  "_where": "J:\\ReactNativeMovieApp\\node_modules\\@react-navigation\\core",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/query-string/issues"
  },
  "dependencies": {
    "decode-uri-component": "^0.2.0",
    "split-on-first": "^1.0.0",
    "strict-uri-encode": "^2.0.0"
  },
  "description": "Parse and stringify URL query strings",
  "devDependencies": {
    "ava": "^1.4.1",
    "deep-equal": "^1.0.1",
    "fast-check": "^1.5.0",
    "tsd": "^0.7.3",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KG4bhCFYapExLsUHrFt+kQVEegF2agm4cpF/VNc6pZVthIfCc/GK8t8VyNIE3nyXG9DK3Tf2EGkxjR6/uRdYsA==",
    "shasum": "1c3b727c370cf00f177c99f328fda2108f8fa3dd",
    "tarball": "https://registry.npmjs.org/query-string/-/query-string-6.9.0.tgz",
    "fileCount": 5,
    "unpackedSize": 23819,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdy4qXCRA9TVsSAnZWagAAwgIP/0hXBQj2hIPtao5Gy1oX\nbWQ4rZh+OMSDubjxAze5wC1M6ZMYdA7+zU1OGKHbh3QRQldOfmUVZSBYAX9s\ncJiefIZSqW9JsItOlNHpWxIldXHTC0fWmPhEpSmatInQz1M3xpLp7JDHb4Vm\nG88H2bZ1er77VQmgR7jENv0v8xJ2Sy7xKzqbA0Y8kx+WYiS6IX+/di0Ej3NN\n6Ezfw8QvpqZrk1U1rHy09QXw/HG8kC63xDyF/mcpBySb82Nau9ZywECIYSXW\nH9jYha1Bb5u6ihM5hHrP1FTNizOAZjED+F+BRruTJKs1dilZccVeIYbY2SsS\n6o0tPq4VngqfXdqYNLUQU8FU47xDs89eeI9hOjMQq1QXLmuogdhno7j7Ysna\nUpnZLzHWxpvFqJtPHaRhSkotAiCG5XYkdqUhiXuBrf5VE1eCv1ZMC+HDfJZ5\nRlwexSJK8w90zWFFy7MfSlMHrF3Q/dlwmPhLdjR2vCxj9BZ6jbWpduu1sCup\nHkbPjtFvGimObHmP5zMZwYqEz9hVOJr9TO7kGBAC1clMEEWSnotBiEDssfs1\n8jBTzUdIcAeoCee2Pb0aB4r7PLwk6wMDFKp+BPoB/ZJRJPDEkE2tnRo7Ms02\nPPrbwy4BOxfHsX3c4tebF+jwdiALijGiroJnp03meWz4priHr0BjQIAANMTv\ns3cJ\r\n=Vp5y\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "cca729511b8ee4244caab51b7fce2c2a39775dc7",
  "homepage": "https://github.com/sindresorhus/query-string#readme",
  "keywords": [
    "browser",
    "querystring",
    "query",
    "string",
    "qs",
    "param",
    "parameter",
    "url",
    "parse",
    "stringify",
    "encode",
    "decode",
    "searchparams"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "query-string",
  "optionalDependencies": {},
  "readme": "# query-string [![Build Status](https://travis-ci.org/sindresorhus/query-string.svg?branch=master)](https://travis-ci.org/sindresorhus/query-string)\n\n> Parse and stringify URL [query strings](https://en.wikipedia.org/wiki/Query_string)\n\n\n## Install\n\n```\n$ npm install query-string\n```\n\nThis module targets Node.js 6 or later and the latest version of Chrome, Firefox, and Safari. If you want support for older browsers, or, [if your project is using create-react-app v1](https://github.com/sindresorhus/query-string/pull/148#issuecomment-399656020), use version 5: `npm install query-string@5`.\n\n\n## Usage\n\n```js\nconst queryString = require('query-string');\n\nconsole.log(location.search);\n//=> '?foo=bar'\n\nconst parsed = queryString.parse(location.search);\nconsole.log(parsed);\n//=> {foo: 'bar'}\n\nconsole.log(location.hash);\n//=> '#token=bada55cafe'\n\nconst parsedHash = queryString.parse(location.hash);\nconsole.log(parsedHash);\n//=> {token: 'bada55cafe'}\n\nparsed.foo = 'unicorn';\nparsed.ilike = 'pizza';\n\nconst stringified = queryString.stringify(parsed);\n//=> 'foo=unicorn&ilike=pizza'\n\nlocation.search = stringified;\n// note that `location.search` automatically prepends a question mark\nconsole.log(location.search);\n//=> '?foo=unicorn&ilike=pizza'\n```\n\n\n## API\n\n### .parse(string, options?)\n\nParse a query string into an object. Leading `?` or `#` are ignored, so you can pass `location.search` or `location.hash` directly.\n\nThe returned object is created with [`Object.create(null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) and thus does not have a `prototype`.\n\n#### options\n\nType: `object`\n\n##### decode\n\nType: `boolean`\\\nDefault: `true`\n\nDecode the keys and values. URL components are decoded with [`decode-uri-component`](https://github.com/SamVerschueren/decode-uri-component).\n\n##### arrayFormat\n\nType: `string`\\\nDefault: `'none'`\n\n- `'bracket'`: Parse arrays with bracket representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo[]=1&foo[]=2&foo[]=3', {arrayFormat: 'bracket'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'index'`: Parse arrays with index representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo[0]=1&foo[1]=2&foo[3]=3', {arrayFormat: 'index'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'comma'`: Parse arrays with elements separated by comma:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1,2,3', {arrayFormat: 'comma'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'none'`: Parse arrays with elements using duplicate keys:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1&foo=2&foo=3');\n//=> {foo: ['1', '2', '3']}\n```\n\n##### sort\n\nType: `Function | boolean`\\\nDefault: `true`\n\nSupports both `Function` as a custom sorting function or `false` to disable sorting.\n\n##### parseNumbers\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1', {parseNumbers: true});\n//=> {foo: 1}\n```\n\nParse the value as a number type instead of string type if it's a number.\n\n##### parseBooleans\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=true', {parseBooleans: true});\n//=> {foo: true}\n```\n\nParse the value as a boolean type instead of string type if it's a boolean.\n\n### .stringify(object, options?)\n\nStringify an object into a query string and sorting the keys.\n\n#### options\n\nType: `object`\n\n##### strict\n\nType: `boolean`\\\nDefault: `true`\n\nStrictly encode URI components with [strict-uri-encode](https://github.com/kevva/strict-uri-encode). It uses [encodeURIComponent](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) if set to false. You probably [don't care](https://github.com/sindresorhus/query-string/issues/42) about this option.\n\n##### encode\n\nType: `boolean`\\\nDefault: `true`\n\n[URL encode](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) the keys and values.\n\n##### arrayFormat\n\nType: `string`\\\nDefault: `'none'`\n\n- `'bracket'`: Serialize arrays using bracket representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'bracket'});\n//=> 'foo[]=1&foo[]=2&foo[]=3'\n```\n\n- `'index'`: Serialize arrays using index representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'index'});\n//=> 'foo[0]=1&foo[1]=2&foo[2]=3'\n```\n\n- `'comma'`: Serialize arrays by separating elements with comma:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'comma'});\n//=> 'foo=1,2,3'\n```\n\n- `'none'`: Serialize arrays by using duplicate keys:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]});\n//=> 'foo=1&foo=2&foo=3'\n```\n\n##### sort\n\nType: `Function | boolean`\n\nSupports both `Function` as a custom sorting function or `false` to disable sorting.\n\n```js\nconst queryString = require('query-string');\n\nconst order = ['c', 'a', 'b'];\n\nqueryString.stringify({a: 1, b: 2, c: 3}, {\n\tsort: (a, b) => order.indexOf(a) - order.indexOf(b)\n});\n//=> 'c=3&a=1&b=2'\n```\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({b: 1, c: 2, a: 3}, {sort: false});\n//=> 'b=1&c=2&a=3'\n```\n\nIf omitted, keys are sorted using `Array#sort()`, which means, converting them to strings and comparing strings in Unicode code point order.\n\n##### skipNull\n\nSkip keys with `null` as the value.\n\nNote that keys with `undefined` as the value are always skipped.\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: 1, b: undefined, c: null, d: 4}, {\n\tskipNull: true\n});\n//=> 'a=1&d=4'\n```\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: undefined, b: null}, {\n\tskipNull: true\n});\n//=> ''\n```\n\n### .extract(string)\n\nExtract a query string from a URL that can be passed into `.parse()`.\n\nNote: This behaviour can be changed with the `skipNull` option.\n\n### .parseUrl(string, options?)\n\nExtract the URL and the query string as an object.\n\nThe `options` are the same as for `.parse()`.\n\nReturns an object with a `url` and `query` property.\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parseUrl('https://foo.bar?foo=bar');\n//=> {url: 'https://foo.bar', query: {foo: 'bar'}}\n```\n\n\n## Nesting\n\nThis module intentionally doesn't support nesting as it's not spec'd and varies between implementations, which causes a lot of [edge cases](https://github.com/visionmedia/node-querystring/issues).\n\nYou're much better off just converting the object to a JSON string:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({\n\tfoo: 'bar',\n\tnested: JSON.stringify({\n\t\tunicorn: 'cake'\n\t})\n});\n//=> 'foo=bar&nested=%7B%22unicorn%22%3A%22cake%22%7D'\n```\n\nHowever, there is support for multiple instances of the same key:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('likes=cake&name=bob&likes=icecream');\n//=> {likes: ['cake', 'icecream'], name: 'bob'}\n\nqueryString.stringify({color: ['taupe', 'chartreuse'], id: '515'});\n//=> 'color=taupe&color=chartreuse&id=515'\n```\n\n\n## Falsy values\n\nSometimes you want to unset a key, or maybe just make it present without assigning a value to it. Here is how falsy values are stringified:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: false});\n//=> 'foo=false'\n\nqueryString.stringify({foo: null});\n//=> 'foo'\n\nqueryString.stringify({foo: undefined});\n//=> ''\n```\n\n\n## query-string for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of query-string and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-query-string?utm_source=npm-query-string&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/query-string.git"
  },
  "scripts": {
    "test": "xo && ava && tsd"
  },
  "version": "6.9.0"
}
