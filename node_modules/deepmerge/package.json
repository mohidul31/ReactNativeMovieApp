{
  "_args": [
    [
      {
        "raw": "deepmerge@^3.2.0",
        "scope": null,
        "escapedName": "deepmerge",
        "name": "deepmerge",
        "rawSpec": "^3.2.0",
        "spec": ">=3.2.0 <4.0.0",
        "type": "range"
      },
      "J:\\ReactNativeMovieApp\\RNMovieApp\\node_modules\\react-native\\node_modules\\@react-native-community\\cli"
    ]
  ],
  "_from": "deepmerge@^3.2.0",
  "_hasShrinkwrap": false,
  "_id": "deepmerge@3.3.0",
  "_location": "/deepmerge",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deepmerge_3.3.0_1561045725574_0.38999368394339506"
  },
  "_npmUser": {
    "name": "tehshrike",
    "email": "me@JoshDuff.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deepmerge@^3.2.0",
    "scope": null,
    "escapedName": "deepmerge",
    "name": "deepmerge",
    "rawSpec": "^3.2.0",
    "spec": ">=3.2.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native/@react-native-community/cli"
  ],
  "_resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-3.3.0.tgz",
  "_shasum": "d3c47fd6f3a93d517b14426b0628a17b0125f5f7",
  "_shrinkwrap": null,
  "_spec": "deepmerge@^3.2.0",
  "_where": "J:\\ReactNativeMovieApp\\RNMovieApp\\node_modules\\react-native\\node_modules\\@react-native-community\\cli",
  "bugs": {
    "url": "https://github.com/TehShrike/deepmerge/issues"
  },
  "dependencies": {},
  "description": "A library for deep (recursive) merging of Javascript objects",
  "devDependencies": {
    "@types/node": "^8.10.49",
    "is-mergeable-object": "1.1.0",
    "is-plain-object": "^2.0.4",
    "jsmd": "^1.0.1",
    "rollup": "^1.15.5",
    "rollup-plugin-commonjs": "^10.0.0",
    "rollup-plugin-node-resolve": "^5.0.2",
    "tape": "^4.10.2",
    "ts-node": "7.0.1",
    "typescript": "=2.2.2",
    "uglify-js": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-GRQOafGHwMHpjPx9iCvTgpu9NojZ49q794EEL94JVEw6VaeA8XTUyBKvAkOOjBX9oJNiV6G3P+T+tihFjo2TqA==",
    "shasum": "d3c47fd6f3a93d517b14426b0628a17b0125f5f7",
    "tarball": "https://registry.npmjs.org/deepmerge/-/deepmerge-3.3.0.tgz",
    "fileCount": 8,
    "unpackedSize": 22627,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdC6reCRA9TVsSAnZWagAAiosP/RKjcxtKMsyprGt3Q6VH\nB4wPoFzy4gJoZPLX+hQwRKkOjFchh6ejSjsvnWTSbLNJ4Y9dBBOprko3h3qf\nfvq4PbrQI3O7Lmaouh9/uY5N5t2JcIb4b8KbORh0oJbSnxYpsioVVXkkLBWP\ncsaq2E5ZKapdcop8V/al4GtDVjKxKsTz9j+f/FOevGgFoWa/i75Zsi7mDZ2q\nYUknwipGhUvyKPEB30rDHevDxgd1WVAtkbDZr83lXM8QLriVT2PtLZD7EhkE\nCnozzlCoGI4lZqsBH187j90650q0APKnW0LuWiogZN1zB5jo4JGxT17DBIHU\nls0Cb5VIwCgXUf59PwGhph4klsqv2T/d5+WM/GuruRirbw719cyxpo5FS2tK\n73nqp5tNG8Pi/c5ILH0xXtojYdhAoIgb2M1az5Z8AUcLvyhkHOh1ifAWNHa4\naPxcoscLqWYbSMeg7nCkuoUi3B/tq/ml2VTsocN6ST7WjEuAGYvAjIYkTP9a\nShrtI/QPSIXpMUfEOEMHa0I3YVNRkDL9tnQAYeeKqa16udmbFpqdBERrBGe5\nQK+Us3a2Cww42UKqk+rYhIeM2Km3k9wNXpB7XUf+1x7Xhr8OJVwEbOu/3D56\nkRe9d3zpDnKx35tBeIIJrF3I37r8luFUjiJmhHGv4QIsUL8wAdTGhtr+88zm\nY0zB\r\n=F+Z4\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "58cc468e61431bdf074a8af1b7f145f2a94208e1",
  "homepage": "https://github.com/TehShrike/deepmerge",
  "keywords": [
    "merge",
    "deep",
    "extend",
    "copy",
    "clone",
    "recursive"
  ],
  "license": "MIT",
  "main": "dist/umd.js",
  "maintainers": [
    {
      "name": "tehshrike",
      "email": "me@JoshDuff.com"
    }
  ],
  "name": "deepmerge",
  "optionalDependencies": {},
  "readme": "# deepmerge\n\nMerges the enumerable properties of two or more objects deeply.\n\n> UMD bundle is 646B minified+gzipped\n\n## Getting Started\n\n### Example Usage\n<!--js\nconst merge = require('./')\n-->\n\n```js\nconst x = {\n\tfoo: { bar: 3 },\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}]\n}\n\nconst y = {\n\tfoo: { baz: 4 },\n\tquux: 5,\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}]\n}\n\nconst output = {\n\tfoo: {\n\t\tbar: 3,\n\t\tbaz: 4\n\t},\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}, {\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}],\n\tquux: 5\n}\n\nmerge(x, y) // => output\n```\n\n\n### Installation\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\ndeepmerge can be used directly in the browser without the use of package managers/bundlers as well:  [UMD version from unpkg.com](https://unpkg.com/deepmerge/dist/umd.js).\n\n\n### Include\n\ndeepmerge exposes a CommonJS entry point:\n\n```\nconst merge = require('deepmerge')\n```\n\nThe ESM entry point was dropped due to a [Webpack bug](https://github.com/webpack/webpack/issues/6584).\n\n# API\n\n\n## `merge(x, y, [options])`\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` is modified.\n\n**Note:** By default, arrays are merged by concatenating them.\n\n## `merge.all(arrayOfObjects, [options])`\n\nMerges any number of objects into a single result object.\n\n```js\nconst foobar = { foo: { bar: 3 } }\nconst foobaz = { foo: { baz: 4 } }\nconst bar = { bar: 'yay!' }\n\nmerge.all([ foobar, foobaz, bar ]) // => { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n```\n\n\n## Options\n\n### `arrayMerge`\n\nThere are multiple ways to merge two arrays, below are a few examples but you can also create your own custom function.\n\n#### Overwrite Array\n\nOverwrites the existing array values completely rather than concatenating them\n\n```js\nconst overwriteMerge = (destinationArray, sourceArray, options) => sourceArray\n\nmerge(\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t{ arrayMerge: overwriteMerge }\n) // => [3, 2, 1]\n```\n\n#### Combine Array\n\nCombine arrays, such as overwriting existing defaults while also adding/keeping values that are different names\n\nTo use the legacy (pre-version-2.0.0) array merging algorithm, use the following:\n\n```js\nconst emptyTarget = value => Array.isArray(value) ? [] : {}\nconst clone = (value, options) => merge(emptyTarget(value), value, options)\n\nconst combineMerge = (target, source, options) => {\n\tconst destination = target.slice()\n\n\tsource.forEach((item, index) => {\n\t\tif (typeof destination[index] === 'undefined') {\n\t\t\tconst cloneRequested = options.clone !== false\n\t\t\tconst shouldClone = cloneRequested && options.isMergeableObject(item)\n\t\t\tdestination[index] = shouldClone ? clone(item, options) : item\n\t\t} else if (options.isMergeableObject(item)) {\n\t\t\tdestination[index] = merge(target[index], item, options)\n\t\t} else if (target.indexOf(item) === -1) {\n\t\t\tdestination.push(item)\n\t\t}\n\t})\n\treturn destination\n}\n\nmerge(\n\t[{ a: true }],\n\t[{ b: true }, 'ah yup'],\n\t{ arrayMerge: combineMerge }\n) // => [{ a: true, b: true }, 'ah yup']\n```\n\n### `isMergeableObject`\n\nBy default, deepmerge clones every property from almost every kind of object.\n\nYou may not want this, if your objects are of special types, and you want to copy the whole object instead of just copying its properties.\n\nYou can accomplish this by passing in a function for the `isMergeableObject` option.\n\nIf you only want to clone properties of plain objects, and ignore all \"special\" kinds of instantiated objects, you probably want to drop in [`is-plain-object`](https://github.com/jonschlinkert/is-plain-object).\n\n```js\nconst isPlainObject = require('is-plain-object')\n\nfunction SuperSpecial() {\n\tthis.special = 'oh yeah man totally'\n}\n\nconst instantiatedSpecialObject = new SuperSpecial()\n\nconst target = {\n\tsomeProperty: {\n\t\tcool: 'oh for sure'\n\t}\n}\n\nconst source = {\n\tsomeProperty: instantiatedSpecialObject\n}\n\nconst defaultOutput = merge(target, source)\n\ndefaultOutput.someProperty.cool // => 'oh for sure'\ndefaultOutput.someProperty.special // => 'oh yeah man totally'\ndefaultOutput.someProperty instanceof SuperSpecial // => false\n\nconst customMergeOutput = merge(target, source, {\n\tisMergeableObject: isPlainObject\n})\n\ncustomMergeOutput.someProperty.cool // => undefined\ncustomMergeOutput.someProperty.special // => 'oh yeah man totally'\ncustomMergeOutput.someProperty instanceof SuperSpecial // => true\n```\n\n### `customMerge`\n\nSpecifies a function which can be used to override the default merge behavior for a property, based on the property name.\n\nThe `customMerge` function will be passed the key for each property, and should return the function which should be used to merge the values for that property.\n\nIt may also return undefined, in which case the default merge behaviour will be used.\n\n```js\nconst alex = {\n    name: {\n        first: 'Alex',\n        last: 'Alexson'\n    },\n    pets: ['Cat', 'Parrot']\n}\n\nconst tony = {\n    name: {\n        first: 'Tony',\n        last: 'Tonison'\n    },\n    pets: ['Dog']\n}\n\nconst mergeNames = (nameA, nameB) => `${nameA.first} and ${nameB.first}`\n\nconst options = {\n    customMerge: (key) => {\n        if (key === 'name') {\n            return mergeNames\n        }\n    }\n}\n\nconst result = merge(alex, tony, options)\n\nresult.name // => 'Alex and Tony'\nresult.pets // => ['Cat', 'Parrot', 'Dog']\n```\n\n\n### `clone`\n\n*Deprecated.*\n\nDefaults to `true`.\n\nIf `clone` is `false` then child objects will be copied directly instead of being cloned.  This was the default behavior before version 2.x.\n\n\n# Testing\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\n\n# License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TehShrike/deepmerge.git"
  },
  "scripts": {
    "build": "rollup -c",
    "size": "npm run build && uglifyjs --compress --mangle -- ./dist/umd.js | gzip -c | wc -c",
    "test": "npm run build && tape test/*.js && jsmd readme.md && npm run test:typescript",
    "test:typescript": "tsc --noEmit test/typescript.ts && ts-node test/typescript.ts"
  },
  "version": "3.3.0"
}
