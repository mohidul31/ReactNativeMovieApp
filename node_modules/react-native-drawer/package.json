{
  "_args": [
    [
      {
        "raw": "react-native-drawer@2.5.1",
        "scope": null,
        "escapedName": "react-native-drawer",
        "name": "react-native-drawer",
        "rawSpec": "2.5.1",
        "spec": "2.5.1",
        "type": "version"
      },
      "J:\\ReactNativeMovieApp\\node_modules\\native-base"
    ]
  ],
  "_from": "react-native-drawer@2.5.1",
  "_hasShrinkwrap": false,
  "_id": "react-native-drawer@2.5.1",
  "_location": "/react-native-drawer",
  "_nodeVersion": "10.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-drawer_2.5.1_1538499634119_0.8280765786148843"
  },
  "_npmUser": {
    "name": "rt2zz",
    "email": "ztstory@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-drawer@2.5.1",
    "scope": null,
    "escapedName": "react-native-drawer",
    "name": "react-native-drawer",
    "rawSpec": "2.5.1",
    "spec": "2.5.1",
    "type": "version"
  },
  "_requiredBy": [
    "/native-base"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-drawer/-/react-native-drawer-2.5.1.tgz",
  "_shasum": "08b9314184f48c724f1b467f8859797369798654",
  "_shrinkwrap": null,
  "_spec": "react-native-drawer@2.5.1",
  "_where": "J:\\ReactNativeMovieApp\\node_modules\\native-base",
  "author": {
    "name": "rt2zz",
    "email": "zack@root-two.com"
  },
  "bugs": {
    "url": "https://github.com/rt2zz/react-native-drawer/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.8",
    "tween-functions": "^1.0.1"
  },
  "description": "React Native Drawer",
  "devDependencies": {
    "babel-eslint": "^4.1.8",
    "eslint": "^1.10.3",
    "eslint-config-rackt": "^1.1.1",
    "eslint-config-standard-react": "^1.2.1",
    "eslint-plugin-react": "^3.14.0",
    "eslint-plugin-standard": "^1.3.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cxcQNbSWy5sbGi7anSVp6EDr6JarOBMY9lbFOeLFeVYbONiudoqRKbgEsSDgSw3/LFCLvUXK5zdjXCOedeytxQ==",
    "shasum": "08b9314184f48c724f1b467f8859797369798654",
    "tarball": "https://registry.npmjs.org/react-native-drawer/-/react-native-drawer-2.5.1.tgz",
    "fileCount": 6,
    "unpackedSize": 33046,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbs6QyCRA9TVsSAnZWagAAbg8P/1ZQ6S1vRsv4KOc1tBZI\n+W8F03KV9oIJ9CpmdFWH3fQZqr5NByDpHsAI8AqOZcGIv8ZLRLK6mW72s1Pe\nOy+ydv0MiqRUndY/6dDDN+HieLNU5prBug4vQ2EZZMVCla+gnB2v8fgSxXa8\nyjId3mkFodeLGkxBcggAke8l6V7wmOX18lOwT5AhcpJVoq2dbAdc4jbVX2E3\nbYYyzd4hl/WTMLa1E0pxH7QPXEfbD4THX9P7rlmKmyAvGRNRGVYpOo89W5im\n6SwaQTc33GaKGKqH98Jv044o8LMb3fof4W5irFp7ZKRP0UB2/cXLILXFPqmA\nfjpH9k9vIOhpSgL296iNjjp/Y5nJYwMUY9ejp6Wky/MwyEaiITca5BnYLm/d\n/K/HUVrKoNV8NsYbxDxGxOB15aFFZV/1aoqLS68nVUtbsNIAMl5dEzjo1A3J\npur4Fec8it05JTPEaym2aN7ukTcSOnRbtw5APEljL0F5rFJxEvX4i/UEfIN3\nlHVBqLl9fD9svhv4mZHlbztr3dJ1jkkJhV6C0bNwhmwAJ7ISsX97wBdW4NII\n/WQANrNpbQJWgtRxHiKt0g0ayGKEXpUnl6/PRckCMNrzoICLpsPO9RYXq+C+\n8DmYwu85sQRG6a6De3Squx4iNOIzkRfEQZTmbR0R7Y5KFjTE8NhnbwlryAeF\nEITT\r\n=Bw7/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "0bbf531076b02d027c9ac776eee64fa43545ad8e",
  "homepage": "https://github.com/rt2zz/react-native-drawer",
  "keywords": [
    "react",
    "react-native",
    "react-component",
    "drawer",
    "side-menu",
    "menu",
    "ios",
    "android",
    "material design"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "rt2zz",
      "email": "ztstory@gmail.com"
    }
  ],
  "name": "react-native-drawer",
  "optionalDependencies": {},
  "readme": "\n### USAGE WARNING\nThis module is not as performant as it should be. For production applications we generally recommend using either [React Native Side Menu](https://github.com/react-native-community/react-native-side-menu) or [React Navigation](https://github.com/react-navigation/react-navigation) as applicable. React Native Drawer will continue to be available and potentially useful for its high customizability but again it is **not** recommended for production appliciations. If you are interested in revamping react native drawer to be more performant (i.e. use Animated) please get in touch!\n\n\n## React Native Drawer\n<img width=\"220px\" align=\"right\" src=\"https://raw.githubusercontent.com/rt2zz/react-native-drawer/master/examples/rn-drawer.gif\" />\n\nReact native drawer, configurable to achieve material design style, slack style, parallax, and more. Works in both iOS and Android.\n\n[![npm version](https://img.shields.io/npm/v/react-native-drawer.svg?style=flat-square)](https://www.npmjs.com/package/react-native-drawer)\n[![npm downloads](https://img.shields.io/npm/dm/react-native-drawer.svg?style=flat-square)](https://www.npmjs.com/package/react-native-drawer)\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Props](#props)\n- [Demo](#demo)\n- [Credits](#credits)\n\n### Installation\n`npm install --save react-native-drawer`\n\n### Usage\n```javascript\nimport Drawer from 'react-native-drawer'\n\nclass Application extends Component {  \n  closeControlPanel = () => {\n    this._drawer.close()\n  };\n  openControlPanel = () => {\n    this._drawer.open()\n  };\n  render () {\n    return (\n      <Drawer\n        ref={(ref) => this._drawer = ref}\n        content={<ControlPanel />}\n        >\n        <MainView />\n      </Drawer>\n    )\n  }\n})\n```\n\n### Examples\n```js\n//Parallax Effect (slack style)\n<Drawer\n  type=\"static\"\n  content={<ControlPanel />}\n  openDrawerOffset={100}\n  styles={drawerStyles}\n  tweenHandler={Drawer.tweenPresets.parallax}\n  >\n    <Main />\n</Drawer>\n\n//Material Design Style Drawer\n<Drawer\n  type=\"overlay\"\n  content={<ControlPanel />}\n  tapToClose={true}\n  openDrawerOffset={0.2} // 20% gap on the right side of drawer\n  panCloseMask={0.2}\n  closedDrawerOffset={-3}\n  styles={drawerStyles}\n  tweenHandler={(ratio) => ({\n    main: { opacity:(2-ratio)/2 }\n  })}\n  >\n    <Main />\n</Drawer>\n\nconst drawerStyles = {\n  drawer: { shadowColor: '#000000', shadowOpacity: 0.8, shadowRadius: 3},\n  main: {paddingLeft: 3},\n}\n```\n\n### Props\nThis module supports a wide range of drawer styles, and hence has *a lot* of props.\n##### Important\n- `content` (React.Component) `null` - Menu component\n- `type` (String: displace:overlay:static) `displace`- Type of drawer.\n- `open` (Boolean) `null` - If true will trigger drawer open, if false will trigger close.\n- `openDrawerOffset` (Number|Function) `0` - Can either be a integer (pixel value) or decimal (ratio of screen width). Defines the right hand margin when the drawer is open. Or, can be function which returns offset: `(viewport) => viewport.width - 200`\n- `closedDrawerOffset` (Number|Function) `0` - Same as openDrawerOffset, except defines left hand margin when drawer is closed.\n- `disabled` (Boolean) `false` - If true the drawer can not be opened and will not respond to pans.\n- `styles` (Object) `null` - Styles for the drawer, main, drawerOverlay and mainOverlay container Views.\n\n##### Animation / Tween\n**Note**: In the future animations with use Animated, and the api will change.\n- `tweenHandler` (Function) `null` - Takes in the pan ratio (decimal 0 to 1) that represents the tween percent. Returns an object of native props to be set on the constituent views { drawer: {/*native props*/}, main: {/*native props*/}, mainOverlay: {/*native props*/} }\n- `tweenDuration` (Integer) `250` - The duration of the open/close animation.\n- `tweenEasing` (String) `linear` - A easing type supported by [tween-functions](https://www.npmjs.com/package/tween-functions)\n\n##### Event Handlers\n- `onOpen` (Function) - Will be called immediately after the drawer has entered the open state.\n- `onOpenStart` (Function) callback fired at the start of an open animation.\n- `onClose` (Function) - Will be called immediately after the drawer has entered the closed state.\n- `onCloseStart` (Function) callback fired at the start of a close animation.\n\n##### Gestures\n- `captureGestures` (oneOf(true, false, 'open', 'closed')) `open` - If true, will capture all gestures inside of the pan mask. If 'open' will only capture when drawer is open.\n- `acceptDoubleTap` (Boolean) `false` - Toggle drawer when double tap occurs within pan mask?\n- `acceptTap` (Boolean) `false` - Toggle drawer when any tap occurs within pan mask?\n- `acceptPan` (Boolean) `true` - Allow for drawer pan (on touch drag). Set to false to effectively disable the drawer while still allowing programmatic control.\n- `tapToClose` (Boolean) `false` - Same as acceptTap, except only for close.\n- `negotiatePan` (Boolean) `false` - If true, attempts to handle only horizontal swipes, making it play well with a child `ScrollView`.\n\n##### Additional Configurations\n- `panThreshold` (Number) `.25` - Ratio of screen width that must be travelled to trigger a drawer open/close.\n- `panOpenMask` (Number) `null` - Ratio of screen width that is valid for the start of a pan open action. If null -> defaults to `max(.05, closedDrawerOffset)`.\n- `panCloseMask` (Number) `null` - Ratio of screen width that is valid for the start of a pan close action. If null -> defaults to `max(.05, openDrawerOffset)`.\n- `initializeOpen` (Boolean) `false` - Initialize with drawer open?\n- `side` (String left|right|top|bottom) `left` - which side the drawer should be on.\n- `useInteractionManager` (Boolean) `false` - if true will run InteractionManager for open/close animations.\n- `elevation` (Number) `0` - (Android-only) Sets the elevation of the drawer using Android's underlying [elevation API](https://developer.android.com/training/material/shadows-clipping.html#Elevation)\n\n### Tween Handler\nYou can achieve pretty much any animation you want using the tween handler with the transformMatrix property. E.G.\n```js\ntweenHandler={(ratio) => {\n  var r0 = -ratio/6\n  var r1 = 1-ratio/6\n  var t = [\n             r1,  r0,  0,  0,\n             -r0, r1,  0,  0,\n             0,   0,   1,  0,\n             0,   0,   0,  1,\n          ]\n  return {\n    main: {\n      style: {\n        transformMatrix: t,\n        opacity: 1 - ratio/2,\n      },\n    }\n  }\n}}\n```\nWill result in a skewed fade out animation.\n\n### Opening & Closing the Drawer Programmatically\nThree options:\n\n1. Use the open prop (controlled mode):  \n\n    ```js\n    <Drawer\n      open={true}\n    ```\n\n2. Using the Drawer Ref:\n\n    ```js\n    // assuming ref is set up on the drawer as (ref) => this._drawer = ref\n    onPress={() => {this._drawer.open()}}\n    ```\n\n3. Using Context\n\n    ```js\n    contextTypes = {drawer: React.PropTypes.object}\n    // later...\n    this.context.drawer.open()\n    ```\n\n### Demo\n* `git clone https://github.com/rt2zz/react-native-drawer.git`\n* `cd react-native-drawer/examples/RNDrawerDemo && npm install`\n* **iOS**\n\t* Open `./examples/RNDrawerDemo/RNDrawerDemo.xcodeproject` in xcode\n\t* `command+r` (in xcode)\n* **Android**\n\t* Run android simulator / plug in your android device\n\t* Run `react-native run-android` in terminal\n\n### Credits\nComponent was adapted from and inspired by\n[@khanghoang](https://github.com/khanghoang)'s [RNSideMenu](https://github.com/khanghoang/RNSideMenu)\n*AND*\n[@kureevalexey](https://twitter.com/kureevalexey)'s [react-native-side-menu](https://github.com/Kureev/react-native-side-menu)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rt2zz/react-native-drawer.git"
  },
  "scripts": {},
  "version": "2.5.1"
}
